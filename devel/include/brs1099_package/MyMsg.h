// Generated by gencpp from file brs1099_package/MyMsg.msg
// DO NOT EDIT!


#ifndef BRS1099_PACKAGE_MESSAGE_MYMSG_H
#define BRS1099_PACKAGE_MESSAGE_MYMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace brs1099_package
{
template <class ContainerAllocator>
struct MyMsg_
{
  typedef MyMsg_<ContainerAllocator> Type;

  MyMsg_()
    : id(0)
    , content()  {
    }
  MyMsg_(const ContainerAllocator& _alloc)
    : id(0)
    , content(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _content_type;
  _content_type content;





  typedef boost::shared_ptr< ::brs1099_package::MyMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::brs1099_package::MyMsg_<ContainerAllocator> const> ConstPtr;

}; // struct MyMsg_

typedef ::brs1099_package::MyMsg_<std::allocator<void> > MyMsg;

typedef boost::shared_ptr< ::brs1099_package::MyMsg > MyMsgPtr;
typedef boost::shared_ptr< ::brs1099_package::MyMsg const> MyMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::brs1099_package::MyMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::brs1099_package::MyMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::brs1099_package::MyMsg_<ContainerAllocator1> & lhs, const ::brs1099_package::MyMsg_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.content == rhs.content;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::brs1099_package::MyMsg_<ContainerAllocator1> & lhs, const ::brs1099_package::MyMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace brs1099_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::brs1099_package::MyMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::brs1099_package::MyMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brs1099_package::MyMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brs1099_package::MyMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brs1099_package::MyMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brs1099_package::MyMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::brs1099_package::MyMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5b3791c6f6999d894a380dc2e50b01e2";
  }

  static const char* value(const ::brs1099_package::MyMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5b3791c6f6999d89ULL;
  static const uint64_t static_value2 = 0x4a380dc2e50b01e2ULL;
};

template<class ContainerAllocator>
struct DataType< ::brs1099_package::MyMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "brs1099_package/MyMsg";
  }

  static const char* value(const ::brs1099_package::MyMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::brs1099_package::MyMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n"
"string content\n"
;
  }

  static const char* value(const ::brs1099_package::MyMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::brs1099_package::MyMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.content);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MyMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::brs1099_package::MyMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::brs1099_package::MyMsg_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "content: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.content);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BRS1099_PACKAGE_MESSAGE_MYMSG_H
